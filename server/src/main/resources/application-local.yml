spring:
  security:
    oauth2:
      client:
        provider:
          # KAKAO Provider
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

          # NAVER Provider
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

        registration:
          # KAKAO Client
          kakao:
            client-id: ${KAKAO_REST_API_KEY}
            client-secret: ${KAKAO_SECRET}
            redirect-uri: https://zerohipoo.shop/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            scope: account_email
            client-authentication-method: POST

          # NAVER Client
          naver:
            client-id: ${NAVER_CLIENTID}
            client-secret: ${NAVER_SECRET}
            scope: email
            redirect-uri: https://zerohipoo.shop/login/oauth2/code/naver
            authorization-grant-type: authorization_code

          # Google Client
          google:
            clientId: ${GOOGLE_CLIENTID}
            clientSecret: ${GOOGLE_SECRET}
            scope:
              - email
            redirectUri: https://zerohipoo.shop/login/oauth2/code/google
            authorization-grant-type: authorization_code
  h2:
    console:
      enabled: true
      path: /h2
#      settings:
#        web-allow-others: true
  datasource:
    url: jdbc:h2:mem:test
  sql:
    init:
      data-locations: classpath*:db/h2/data.sql
      mode: always
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  servlet:
    multipart:
      # 각 파일의 최대 크기와 전체 요청 본문의 최대크기 설정
      max-file-size: 10MB
      max-request-size: 10MB
  web:
    resources:
      static-locations: "classpath:/static/, file:src/main/resources/static/" # 정적 리소스의 위치와, 해당 위치에서 파일이 제공되도록 설정
      add-mappings: true
logging:
  level:
    org:
      springframework:
        orm:
          jpa: DEBUG
server:
  servlet:
    encoding:
      force-response: true
#mail:
#  address:
#    admin: admin@gmail.com
jwt:
  key: ${JWT_KEY}
  access-token-expiration-minutes: ${JWT_ACCESS_TOKEN}
  refresh-token-expiration-minutes: ${JWT_REFRESH_TOKEN}

cloud:
  aws:
    s3:
      bucket: ${AWS_S3_BUCKET}
    region:
      static: ${AWS_REGION}
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    stack:
      auto: false
